openapi: 3.1.0
info:
  title: RealWorld Conduit API
  version: 1.0.0
  description: Conduit API documentation
  contact:
    name: RealWorld
    url: https://realworld.how
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
- url: https://api.realworld.io/api
paths:
  /users/login:
    post:
      tags:
      - User and Authentication
      summary: Existing user login
      description: Login for existing user
      operationId: Login
      requestBody:
        description: Credentials to use
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
        required: true
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: 'Invalid value for: body'
          content:
            text/plain:
              schema:
                type: string
      x-codegen-request-body-name: body
  /users:
    post:
      tags:
      - User and Authentication
      description: Register a new user
      operationId: CreateUser
      requestBody:
        description: Details of the new user to register
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserRequest'
        required: true
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: 'Invalid value for: body'
          content:
            text/plain:
              schema:
                type: string
      x-codegen-request-body-name: body
  /user:
    get:
      tags:
      - User and Authentication
      summary: Get current user
      description: Gets the currently logged-in user
      operationId: GetCurrentUser
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    put:
      tags:
      - User and Authentication
      summary: Update current user
      description: Updated user information for current user
      operationId: UpdateCurrentUser
      requestBody:
        description: User details to update. At least **one** field is required.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: 'Invalid value for: body'
          content:
            text/plain:
              schema:
                type: string
      x-codegen-request-body-name: body
  /profiles/{username}:
    get:
      tags:
      - Profile
      summary: Get a profile
      description: Get a profile of a user of the system. Auth is optional
      operationId: GetProfileByUsername
      parameters:
      - name: username
        in: path
        description: Username of the profile to get
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
          required: true
  /profiles/{username}/follow:
    post:
      tags:
      - Profile
      summary: Follow a user
      description: Follow a user by username
      operationId: FollowUserByUsername
      parameters:
      - name: username
        in: path
        description: Username of the profile you want to follow
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
          required: true
    delete:
      tags:
      - Profile
      summary: Unfollow a user
      description: Unfollow a user by username
      operationId: UnfollowUserByUsername
      parameters:
      - name: username
        in: path
        description: Username of the profile you want to unfollow
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
          required: true
  /articles/feed:
    get:
      tags:
      - Articles
      summary: Get recent articles from users you follow
      description: Get most recent articles from users you follow. Use query parameters
        to limit. Auth is required
      operationId: GetArticlesFeed
      parameters:
      - name: offset
        in: query
        description: The number of items to skip before starting to collect the result
          set.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 0
      - name: limit
        in: query
        description: The numbers of items to return.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
      responses:
        '200':
          description: Multiple articles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleArticlesResponse'
        '400':
          description: 'Invalid value for: query parameter offset, Invalid value for:
            query parameter limit'
          content:
            text/plain:
              schema:
                type: string
  /articles:
    get:
      tags:
      - Articles
      summary: Get recent articles globally
      description: Get most recent articles globally. Use query parameters to filter
        results. Auth is optional
      operationId: GetArticles
      parameters:
      - name: tag
        in: query
        description: Filter by tag
        required: false
        schema:
          type: string
      - name: author
        in: query
        description: Filter by author (username)
        required: false
        schema:
          type: string
      - name: favorited
        in: query
        description: Filter by favorites of a user (username)
        required: false
        schema:
          type: string
      - name: offset
        in: query
        description: The number of items to skip before starting to collect the result
          set.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 0
      - name: limit
        in: query
        description: The numbers of items to return.
        required: false
        schema:
          type: integer
          format: int32
          minimum: 1
      responses:
        '200':
          description: Multiple articles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleArticlesResponse'
        '400':
          description: 'Invalid value for: query parameter tag, Invalid value for:
            query parameter author, Invalid value for: query parameter favorited,
            Invalid value for: query parameter offset, Invalid value for: query parameter
            limit'
          content:
            text/plain:
              schema:
                type: string
    post:
      tags:
      - Articles
      summary: Create an article
      description: Create an article. Auth is required
      operationId: CreateArticle
      requestBody:
        description: Article to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewArticleRequest'
        required: true
        x-codegen-request-body-name: body
      responses:
        '200':
          description: Single article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
        '400':
          description: 'Invalid value for: body'
          content:
            text/plain:
              schema:
                type: string
  /articles/{slug}:
    get:
      tags:
      - Articles
      summary: Get an article
      description: Get an article. Auth not required
      operationId: GetArticle
      parameters:
      - name: slug
        in: path
        description: Slug of the article to get
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Single article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
    put:
      tags:
      - Articles
      summary: Update an article
      description: Update an article. Auth is required
      operationId: UpdateArticle
      parameters:
      - name: slug
        in: path
        description: Slug of the article to update
        required: true
        schema:
          type: string
      requestBody:
        description: Article to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
        required: true
      responses:
        '200':
          description: Single article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArticleResponse'
        '400':
          description: 'Invalid value for: body'
          content:
            text/plain:
              schema:
                type: string
      x-codegen-request-body-name: body
    delete:
      tags:
      - Articles
      summary: Delete an article
      description: Delete an article. Auth is required
      operationId: DeleteArticle
      parameters:
      - name: slug
        in: path
        description: Slug of the article to delete
        required: true
        schema:
          type: string
      responses:
        '200':
          description: No content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyOkResponse'
components:
  schemas:
    Article:
      required:
      - slug
      - title
      - description
      - body
      - createdAt
      - updatedAt
      - favorited
      - favoritesCount
      - author
      type: object
      properties:
        slug:
          type: string
        title:
          type: string
        description:
          type: string
        body:
          type: string
        tagList:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        favorited:
          type: boolean
        favoritesCount:
          type: integer
          format: int32
        author:
          $ref: '#/components/schemas/Profile'
    EmptyOkResponse:
      type: object
    LoginUser:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginUserRequest:
      required:
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/LoginUser'
    MultipleArticlesResponse:
      required:
      - articles
      - articlesCount
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        articlesCount:
          type: integer
          format: int32
    NewArticle:
      required:
      - title
      - description
      - body
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        body:
          type: string
        tagList:
          type: array
          items:
            type: string
    NewArticleRequest:
      required:
      - article
      type: object
      properties:
        article:
          $ref: '#/components/schemas/NewArticle'
    NewUser:
      required:
      - username
      - email
      - password
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    NewUserRequest:
      required:
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/NewUser'
    Profile:
      required:
      - username
      - bio
      - image
      - following
      type: object
      properties:
        username:
          type: string
        bio:
          type: string
        image:
          type: string
        following:
          type: boolean
    ProfileResponse:
      required:
      - profile
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
    SingleArticleResponse:
      required:
      - article
      type: object
      properties:
        article:
          $ref: '#/components/schemas/Article'
    UpdateArticle:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        body:
          type: string
    UpdateArticleRequest:
      required:
      - article
      type: object
      properties:
        article:
          $ref: '#/components/schemas/UpdateArticle'
    UpdateUserRequest:
      required:
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
    User:
      required:
      - email
      - token
      - username
      - bio
      - image
      type: object
      properties:
        email:
          type: string
        token:
          type: string
        username:
          type: string
        bio:
          type: string
        image:
          type: string
    UserResponse:
      required:
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
